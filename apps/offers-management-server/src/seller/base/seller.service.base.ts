/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Seller as PrismaSeller,
  Offer as PrismaOffer,
} from "@prisma/client";

export class SellerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SellerCountArgs, "select">): Promise<number> {
    return this.prisma.seller.count(args);
  }

  async sellers(args: Prisma.SellerFindManyArgs): Promise<PrismaSeller[]> {
    return this.prisma.seller.findMany(args);
  }
  async seller(
    args: Prisma.SellerFindUniqueArgs
  ): Promise<PrismaSeller | null> {
    return this.prisma.seller.findUnique(args);
  }
  async createSeller(args: Prisma.SellerCreateArgs): Promise<PrismaSeller> {
    return this.prisma.seller.create(args);
  }
  async updateSeller(args: Prisma.SellerUpdateArgs): Promise<PrismaSeller> {
    return this.prisma.seller.update(args);
  }
  async deleteSeller(args: Prisma.SellerDeleteArgs): Promise<PrismaSeller> {
    return this.prisma.seller.delete(args);
  }

  async findOffers(
    parentId: string,
    args: Prisma.OfferFindManyArgs
  ): Promise<PrismaOffer[]> {
    return this.prisma.seller
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .offers(args);
  }
}
